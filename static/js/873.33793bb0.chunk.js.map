{"version":3,"file":"static/js/873.33793bb0.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) => {\n    if (filterValue !== '') {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue.toLowerCase())\n      );\n    }\n    return contacts;\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 20px 20px 20px 20px;\n  border: 2px solid cadetblue;\n  border-radius: 5px;\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterValue } from 'redux/selectors';\nimport { setFilterValue } from 'redux/filterSlice';\nimport { ContactInput } from 'components/ContactForm/ContactForm.styled';\nimport { FilterLabel } from 'components/Filter/Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const handleInput = filter => {\n    dispatch(setFilterValue(filter.target.value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contact by name:\n      <ContactInput\n        type=\"name\"\n        placeholder=\"Enter searching name...\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={handleInput}\n      />\n    </FilterLabel>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { MdPhone } from 'react-icons/md';\nimport { FiEdit2 } from 'react-icons/fi';\nimport { DeleteButton } from 'components/ContactItem/ContactItem.styled';\nimport {\n  ContactFormStyled,\n  ContactInput,\n  ContactLabel,\n} from 'components/ContactForm/ContactForm.styled';\nimport {\n  ContactItemStyled,\n  ContactName,\n  Modal,\n  OpenEdititorButton,\n  Overlay,\n  ButtonBox,\n  EditButton,\n} from 'components/ContactItem/ContactItem.styled';\nimport { deleteContact, editContact } from 'redux/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [contactName, setContactName] = useState(name);\n  const [contactNumber, setContactNumber] = useState(number);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  const onEditContact = () => {\n    setIsEditing(true);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const editName = form.elements.editName.value;\n    const editNumber = form.elements.editNumber.value;\n\n    const reqBody = {\n      id,\n      name: editName,\n      number: editNumber,\n    };\n\n    dispatch(editContact(reqBody));\n\n    setContactName(editName);\n    setContactNumber(editNumber);\n    setIsEditing(false);\n  };\n\n  const onCancelEdit = () => {\n    setIsEditing(false);\n  };\n\n  return (\n    <ContactItemStyled key={id}>\n      <MdPhone />\n      <ContactName>\n        {contactName} : {contactNumber}\n      </ContactName>\n\n      <OpenEdititorButton\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        type=\"button\"\n        onClick={onEditContact}\n      >\n        <FiEdit2 color={isHovered ? 'blue' : 'cadetblue'} />\n      </OpenEdititorButton>\n      <DeleteButton type=\"button\" onClick={onDeleteContact}>\n        Delete\n      </DeleteButton>\n      {isEditing && (\n        <Overlay>\n          <Modal>\n            <ContactFormStyled onSubmit={handleSubmit} autoComplete=\"off\">\n              <ContactLabel>\n                Edit name\n                <ContactInput\n                  type=\"text\"\n                  name=\"editName\"\n                  defaultValue={contactName}\n                />\n              </ContactLabel>\n              <ContactLabel>\n                Edit number\n                <ContactInput\n                  type=\"text\"\n                  name=\"editNumber\"\n                  defaultValue={contactNumber}\n                />\n              </ContactLabel>\n              <ButtonBox>\n                <EditButton type=\"submit\">Save</EditButton>\n                <EditButton type=\"button\" onClick={onCancelEdit}>\n                  Cancel\n                </EditButton>\n              </ButtonBox>\n            </ContactFormStyled>\n          </Modal>\n        </Overlay>\n      )}\n    </ContactItemStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContacListStyled = styled.ul`\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 2px solid cadetblue;\n  border-radius: 5px;\n  width: 350px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { ContacListStyled } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContacListStyled>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))}\n    </ContacListStyled>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport { Notify } from 'notiflix';\n\n\nimport {\n  ContactFormStyled,\n  ContactInput,\n  ContactLabel,\n  ContactButton,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const form = evt.target;\n    const nameValue = form.elements.name.value;\n    const numberValue = form.elements.number.value;\n\n    const filteredContacts = contacts.filter(\n      contact => contact.name === nameValue\n    );\n\n    filteredContacts.length > 0\n      ? Notify.info(`${nameValue} is allready in contacts`)\n      : dispatch(addContact({ name: nameValue, number: numberValue }));\n    form.reset();\n  }\n\n  return (\n    <ContactFormStyled onSubmit={handleSubmit}>\n      <ContactLabel>\n        Name\n        <ContactInput\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters (less then 25), apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          maxlength=\"25\"\n          required\n        />\n      </ContactLabel>\n      <ContactLabel>\n        Number\n        <ContactInput\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter contact phone number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </ContactLabel>\n      <ContactButton type=\"submit\">Add contact</ContactButton>\n    </ContactFormStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Phonebook = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const TitlePhonebook = styled.h1`\n  margin-left: auto;\n  margin-right: auto;\n  color: gray;\n`;\n\nexport const ContactTitle = styled.h2`\n  margin-left: auto;\n  margin-right: auto;\n  color: gray;\n`;\n\nexport const RequestText = styled.b`\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n// import { Modal } from 'components/ContactEditor/ContactEditor';\nimport {\n  Phonebook,\n  ContactTitle,\n  TitlePhonebook,\n  RequestText,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Phonebook>\n      <TitlePhonebook>Phonebook</TitlePhonebook>\n      <ContactForm />\n      {isLoading && (\n        //   !error &&\n        <RequestText>Request in progress...</RequestText>\n      )}\n      <ContactTitle>Contacts</ContactTitle>\n      <Filter />\n      <ContactList />\n      {/* <Modal></Modal> */}\n    </Phonebook>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilterValue","filter","filterValue","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","FilterLabel","styled","_templateObject","_taggedTemplateLiteral","Filter","dispatch","useDispatch","useSelector","_jsxs","children","_jsx","ContactInput","type","placeholder","value","onChange","setFilterValue","target","ContactItem","_ref","id","number","_useState","useState","_useState2","_slicedToArray","isHovered","setIsHovered","_useState3","_useState4","isEditing","setIsEditing","_useState5","_useState6","contactName","setContactName","_useState7","_useState8","contactNumber","setContactNumber","ContactItemStyled","MdPhone","ContactName","OpenEdititorButton","onMouseEnter","onMouseLeave","onClick","FiEdit2","color","DeleteButton","deleteContact","Overlay","Modal","ContactFormStyled","onSubmit","e","preventDefault","form","currentTarget","editName","elements","editNumber","reqBody","editContact","autoComplete","ContactLabel","defaultValue","ButtonBox","EditButton","ContacListStyled","ContactList","visibleContacts","map","ContactForm","evt","nameValue","numberValue","length","Notify","concat","addContact","reset","pattern","title","maxlength","required","ContactButton","Phonebook","TitlePhonebook","_templateObject2","ContactTitle","_templateObject3","RequestText","_templateObject4","Contacts","useEffect","fetchContacts"],"sourceRoot":""}