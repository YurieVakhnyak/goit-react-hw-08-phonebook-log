{"version":3,"file":"static/js/873.665e591b.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) => {\n    if (filterValue !== '') {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue.toLowerCase())\n      );\n    }\n    return contacts;\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 20px 20px 20px 20px;\n  border: 2px solid cadetblue;\n  border-radius: 5px;\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterValue } from 'redux/selectors';\nimport { setFilterValue } from 'redux/filterSlice';\nimport { ContactInput } from 'components/ContactForm/ContactForm.styled';\nimport { FilterLabel } from 'components/Filter/Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const handleInput = filter => {\n    dispatch(setFilterValue(filter.target.value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contact by name:\n      <ContactInput\n        type=\"name\"\n        placeholder=\"Enter searching name...\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={handleInput}\n      />\n    </FilterLabel>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { MdPhone } from 'react-icons/md';\nimport { DeleteButton } from 'components/ContactItem/ContactItem.styled';\n\nimport {\n  ContactItemStyled,\n  ContactName,\n} from 'components/ContactItem/ContactItem.styled';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = evt => {\n    dispatch(deleteContact(evt.target.name));\n  };\n\n  return (\n    <ContactItemStyled key={id}>\n      <MdPhone />\n      <ContactName>\n        {name} : {number}\n      </ContactName>\n      <DeleteButton type=\"button\" name={id} onClick={onDeleteContact}>\n        Delete\n      </DeleteButton>\n    </ContactItemStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContacListStyled = styled.ul`\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 2px solid cadetblue;\n  border-radius: 5px;\n  width: 350px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { ContacListStyled } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContacListStyled>\n      {visibleContacts ? (\n        visibleContacts.map(({ id, name, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))\n      ) : (\n        <p>nich ne vudno!</p>\n      )}\n    </ContacListStyled>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport { Notify } from 'notiflix';\n\nimport {\n  ContactFormStyled,\n  ContactInput,\n  ContactLabel,\n  ContactButton,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const form = evt.target;\n    const nameValue = form.elements.name.value;\n    const numberValue = form.elements.number.value;\n\n    const filteredContacts = contacts.filter(\n      contact => contact.name === nameValue\n    );\n\n    filteredContacts.length > 0\n      ? Notify.info(`${nameValue} is allready in contacts`)\n      : dispatch(addContact({ name: nameValue, number: numberValue }));\n    form.reset();\n  }\n\n  return (\n    <ContactFormStyled onSubmit={handleSubmit}>\n      <ContactLabel>\n        Name\n        <ContactInput\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters (less then 25), apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          maxlength=\"25\"\n          required\n        />\n      </ContactLabel>\n      <ContactLabel>\n        Number\n        <ContactInput\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter contact phone number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </ContactLabel>\n      <ContactButton type=\"submit\">Add contact</ContactButton>\n    </ContactFormStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Phonebook = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const TitlePhonebook = styled.h1`\n  margin-left: auto;\n  margin-right: auto;\n  color: gray;\n`;\n\nexport const ContactTitle = styled.h2`\n  margin-left: auto;\n  margin-right: auto;\n  color: gray;\n`;\n\nexport const RequestText = styled.b`\n  text-align: center;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport {\n  Phonebook,\n  ContactTitle,\n  TitlePhonebook,\n  RequestText,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Phonebook>\n      <TitlePhonebook>Phonebook</TitlePhonebook>\n      <ContactForm />\n      {isLoading && (\n        //   !error &&\n        <RequestText>Request in progress...</RequestText>\n      )}\n      <ContactTitle>Contacts</ContactTitle>\n      <Filter />\n      <ContactList />\n    </Phonebook>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilterValue","filter","filterValue","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","FilterLabel","styled","Filter","dispatch","useDispatch","useSelector","type","placeholder","value","onChange","setFilterValue","target","ContactItem","id","number","onClick","evt","deleteContact","ContacListStyled","ContactList","visibleContacts","map","ContactForm","onSubmit","preventDefault","form","nameValue","elements","numberValue","length","Notify","addContact","reset","pattern","title","maxlength","required","Phonebook","TitlePhonebook","ContactTitle","RequestText","Contacts","useEffect","fetchContacts"],"sourceRoot":""}